1. RabbitMQ 消息隊列
在使用 RabbitMQ 的架構中，消息隊列會由 RabbitMQ 服務器管理。RabbitMQ 會負責儲存和轉發消息，因此不需要手動實現 MessageQueue 類。
相反，我們將定義一個或多個隊列，在 RabbitMQ 服務器上對消息進行排隊。

2. 生產者（Producer）
生產者將不再直接將消息放入自定義的 MessageQueue 中，而是將消息發送到 RabbitMQ 服務器的指定隊列。
這涉及到建立到 RabbitMQ 服務器的連接，創建一個通道（Channel），並將消息發佈到隊列中。
生產者會發送一條消息，如 "一杯咖啡被購買"，到 RabbitMQ。

3. 消費者（Consumer）
消費者將連接到 RabbitMQ 服務器，監聽指定的隊列。當隊列中出現消息時，消費者將被觸發處理這些消息。
在這個購物場景中，消費者可能會執行如更新庫存的操作來反映咖啡被購買的事實。

使用 RabbitMQ 的購物場景描述：
RabbitMQ 消息隊列：負責儲存 "咖啡購買" 事件的消息。我們可以創建一個名為 "coffee_purchases" 的隊列來儲存這些消息。
生產者：當客戶購買一杯咖啡時，生產者會向 "coffee_purchases" 隊列發送一條消息，表示有一杯咖啡被購買。
消費者：持續監聽 "coffee_purchases" 隊列。每當消費者從隊列中接收到一條消息時，它就執行相應的庫存更新操作，以反映咖啡的銷售。
通過這種方式，使用 RabbitMQ，我們能夠建立一個分散的系統，其中生產者和消費者通過 RabbitMQ 消息隊列進行"解耦合"和"通信"，從而在購買咖啡時動態調整庫存。